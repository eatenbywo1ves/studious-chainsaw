name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: catalytic-computing/catalytic-computing

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run linting
      run: |
        black --check src/
        pylint src/
        mypy src/

    - name: Run tests with coverage
      run: |
        pytest tests/ \
          --cov=catalytic_computing \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          -v

    - name: Run benchmark tests
      run: |
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Security scanning with Bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json

    - name: Dependency vulnerability check
      run: |
        pip install safety
        safety check --json

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.catalytic-computing.io

    steps:
    - uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=$(pwd)/kubeconfig

    - name: Deploy to staging
      run: |
        helm upgrade --install \
          catalytic-computing-staging \
          ./deployment/k8s/helm \
          --namespace staging \
          --create-namespace \
          --values ./deployment/k8s/helm/values.yaml \
          --values ./deployment/k8s/helm/values-staging.yaml \
          --set image.tag=${{ github.sha }} \
          --wait

    - name: Run smoke tests
      run: |
        kubectl run smoke-test \
          --image=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --rm -i --restart=Never \
          -- python -m pytest tests/smoke/

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: https://api.catalytic-computing.io

    steps:
    - uses: actions/checkout@v3

    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=$(pwd)/kubeconfig

    - name: Deploy to production
      run: |
        helm upgrade --install \
          catalytic-computing \
          ./deployment/k8s/helm \
          --namespace production \
          --create-namespace \
          --values ./deployment/k8s/helm/values.yaml \
          --values ./deployment/k8s/helm/values-production.yaml \
          --set image.tag=${{ github.ref_name }} \
          --atomic \
          --timeout 10m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/catalytic-computing -n production
        kubectl get pods -n production -l app.kubernetes.io/name=catalytic-computing

    - name: Run production smoke tests
      run: |
        curl -f https://api.catalytic-computing.io/health/live || exit 1
        curl -f https://api.catalytic-computing.io/health/ready || exit 1

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./dist/*
          ./docs/CHANGELOG.md
        generate_release_notes: true
        draft: false
        prerelease: false