# Complete SaaS Stack for Catalytic Computing Platform
# Production-ready multi-tenant architecture with all services

version: '3.8'

services:
  # ============================================================================
  # DATABASE LAYER
  # ============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: catalytic-postgres
    environment:
      POSTGRES_DB: catalytic_saas
      POSTGRES_USER: catalytic
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./saas/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catalytic -d catalytic_saas"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ============================================================================
  # CACHING & SESSION LAYER
  # ============================================================================

  redis:
    image: redis:7-alpine
    container_name: catalytic-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # ============================================================================
  # SAAS API SERVER
  # ============================================================================

  saas-api:
    build:
      context: .
      dockerfile: Dockerfile.saas
    container_name: catalytic-saas-api
    environment:
      # Database
      DATABASE_URL: postgresql://catalytic:${DB_PASSWORD:-secure_password_change_me}@postgres:5432/catalytic_saas

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change_me_to_secure_random_key}
      JWT_ALGORITHM: RS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 15
      REFRESH_TOKEN_EXPIRE_DAYS: 30

      # API Configuration
      PYTHONUNBUFFERED: 1
      WORKERS: 4
      PORT: 8000
      LOG_LEVEL: INFO

      # Catalytic Computing Configuration
      LATTICE_MEMORY_OPTIMIZATION: enabled
      PARALLEL_CORES: 12
      MAX_LATTICES_PER_TENANT: 100
      CACHE_SIZE: 1024
    volumes:
      - ./saas:/app/saas:ro
      - ./apps:/app/apps:ro
      - ./logs/saas:/app/logs
      - ./keys:/app/keys
    ports:
      - "8000:8000"
    networks:
      - catalytic-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # ============================================================================
  # WEBHOOK SERVICE (INTEGRATED)
  # ============================================================================

  webhook-service:
    image: webhook-system:latest
    container_name: catalytic-webhooks
    environment:
      PYTHONUNBUFFERED: 1
      WEBHOOK_DB_PATH: /app/data/webhooks.db
      LOG_LEVEL: INFO
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - webhook_data:/app/data
      - ./logs/webhooks:/app/logs
    ports:
      - "8001:8000"
    networks:
      - catalytic-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ============================================================================
  # MONITORING & METRICS
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: catalytic-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - catalytic-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: catalytic-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    ports:
      - "3000:3000"
    networks:
      - catalytic-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ============================================================================
  # REVERSE PROXY & LOAD BALANCER
  # ============================================================================

  nginx:
    image: nginx:alpine
    container_name: catalytic-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - catalytic-network
    depends_on:
      - saas-api
      - webhook-service
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ============================================================================
  # BACKGROUND WORKERS (OPTIONAL)
  # ============================================================================

  # worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.worker
  #   environment:
  #     DATABASE_URL: postgresql://catalytic:${DB_PASSWORD:-secure_password_change_me}@postgres:5432/catalytic_saas
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     WORKER_TYPE: billing  # Can be: billing, usage_tracking, email, cleanup
  #     PYTHONUNBUFFERED: 1
  #   volumes:
  #     - ./saas:/app/saas:ro
  #     - ./logs/workers:/app/logs
  #   networks:
  #     - catalytic-network
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   restart: unless-stopped
  #   # Note: To scale workers, use: docker-compose up -d --scale worker=2

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  catalytic-network:
    driver: bridge

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  webhook_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local