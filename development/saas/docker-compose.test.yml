version: '3.8'

services:
  # Test Database
  postgres-test:
    image: postgres:15
    environment:
      POSTGRES_DB: catalytic_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Test Redis
  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # API Service for Testing
  api-test:
    build:
      context: ./api
      dockerfile: Dockerfile.test
    environment:
      - ENVIRONMENT=test
      - DATABASE_URL=postgresql://postgres:test_password@postgres-test:5432/catalytic_test
      - REDIS_URL=redis://redis-test:6379
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY_TEST}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY_TEST}
    ports:
      - "8001:8000"
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service for Testing
  frontend-test:
    build:
      context: ./frontend
      dockerfile: Dockerfile.test
      args:
        - NEXT_PUBLIC_API_URL=http://api-test:8000
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://postgres:test_password@postgres-test:5432/catalytic_test
      - NEXTAUTH_SECRET=test-secret-key
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY_TEST}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY_TEST}
    ports:
      - "3001:3000"
    depends_on:
      api-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Selenium Grid Hub for E2E testing
  selenium-hub:
    image: selenium/hub:4.15.0
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"

  # Chrome Node for Selenium
  selenium-chrome:
    image: selenium/node-chrome:4.15.0
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444

  # Firefox Node for Selenium (optional)
  selenium-firefox:
    image: selenium/node-firefox:4.15.0
    shm_size: 2gb
    depends_on:
      - selenium-hub
    environment:
      - HUB_HOST=selenium-hub
      - HUB_PORT=4444

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "8025:8025" # Web UI
      - "1025:1025" # SMTP

  # MinIO for S3-compatible testing
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Monitoring stack for testing
  prometheus-test:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/test.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana-test:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - ./monitoring/grafana/test-dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/test-provisioning:/etc/grafana/provisioning

volumes:
  postgres_test_data:
  minio_data: