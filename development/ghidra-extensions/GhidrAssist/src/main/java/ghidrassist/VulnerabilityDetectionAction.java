package ghidrassist;

import ghidra.app.context.ListingActionContext;
import ghidra.app.context.ListingContextAction;
import ghidra.program.model.listing.Function;
import docking.action.MenuData;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;

public class VulnerabilityDetectionAction extends ListingContextAction {
    private final GhidrAssistPlugin plugin;

    public VulnerabilityDetectionAction(GhidrAssistPlugin plugin) {
        super("Scan for Vulnerabilities (AI)", plugin.getName());
        this.plugin = plugin;

        setPopupMenuData(new MenuData(
            new String[] {"GhidrAssist", "Scan for Vulnerabilities"},
            "AI"
        ));
    }

    @Override
    protected void actionPerformed(ListingActionContext context) {
        if (context.getProgram() == null) {
            return;
        }

        // Get function at current location
        Function function = context.getProgram().getFunctionManager()
            .getFunctionContaining(context.getAddress());

        if (function == null) {
            return;
        }

        // Show progress
        plugin.showProgress("Scanning function " + function.getName() + " for vulnerabilities...");

        // Execute in background thread
        new Thread(() -> {
            try {
                // Create scanner and scan function
                VulnerabilityScanner scanner = new VulnerabilityScanner(context.getProgram());
                List<VulnerabilityScanner.Vulnerability> vulnerabilities =
                    scanner.scanFunction(function);
                scanner.dispose();

                // Show results dialog on UI thread
                SwingUtilities.invokeLater(() -> {
                    showVulnerabilitiesDialog(function, vulnerabilities);
                });

            } catch (Exception e) {
                SwingUtilities.invokeLater(() -> {
                    plugin.showError("Vulnerability scan failed: " + e.getMessage());
                });
            }
        }).start();
    }

    private void showVulnerabilitiesDialog(Function function,
                                           List<VulnerabilityScanner.Vulnerability> vulnerabilities) {
        // Create dialog
        JDialog dialog = new JDialog();
        dialog.setTitle("GhidrAssist - Vulnerability Scan Results");
        dialog.setModal(true);
        dialog.setSize(900, 600);
        dialog.setLocationRelativeTo(null);

        // Summary panel
        JPanel summaryPanel = new JPanel(new BorderLayout());
        summaryPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Count by severity
        int critical = 0, high = 0, medium = 0, low = 0;
        for (VulnerabilityScanner.Vulnerability vuln : vulnerabilities) {
            switch (vuln.severity) {
                case "CRITICAL": critical++; break;
                case "HIGH": high++; break;
                case "MEDIUM": medium++; break;
                case "LOW": low++; break;
            }
        }

        String summaryText = String.format(
            "<html><b>Function:</b> %s | <b>Total Vulnerabilities:</b> %d | " +
            "<font color='red'><b>Critical:</b> %d</font> | " +
            "<font color='orange'><b>High:</b> %d</font> | " +
            "<font color='blue'><b>Medium:</b> %d</font> | " +
            "<b>Low:</b> %d</html>",
            function.getName(), vulnerabilities.size(), critical, high, medium, low
        );

        JLabel summaryLabel = new JLabel(summaryText);
        summaryPanel.add(summaryLabel, BorderLayout.WEST);

        // Create table
        String[] columnNames = {"Severity", "Type", "Location", "Description", "Recommendation"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Populate table
        for (VulnerabilityScanner.Vulnerability vuln : vulnerabilities) {
            Object[] row = new Object[5];
            row[0] = vuln.severity;
            row[1] = vuln.type;
            row[2] = vuln.location;
            row[3] = vuln.description;
            row[4] = vuln.recommendation;
            tableModel.addRow(row);
        }

        JTable table = new JTable(tableModel);
        table.setRowHeight(30);
        table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

        // Set column widths
        table.getColumnModel().getColumn(0).setPreferredWidth(80);   // Severity
        table.getColumnModel().getColumn(1).setPreferredWidth(150);  // Type
        table.getColumnModel().getColumn(2).setPreferredWidth(120);  // Location
        table.getColumnModel().getColumn(3).setPreferredWidth(250);  // Description
        table.getColumnModel().getColumn(4).setPreferredWidth(250);  // Recommendation

        // Color code severity
        table.setDefaultRenderer(Object.class, new javax.swing.table.DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                Component cell = super.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);

                if (!isSelected) {
                    String severity = (String) table.getValueAt(row, 0);
                    switch (severity) {
                        case "CRITICAL":
                            cell.setBackground(new Color(255, 200, 200));
                            break;
                        case "HIGH":
                            cell.setBackground(new Color(255, 230, 200));
                            break;
                        case "MEDIUM":
                            cell.setBackground(new Color(200, 220, 255));
                            break;
                        case "LOW":
                            cell.setBackground(new Color(240, 240, 240));
                            break;
                        default:
                            cell.setBackground(Color.WHITE);
                    }
                }

                return cell;
            }
        });

        JScrollPane scrollPane = new JScrollPane(table);

        // Message if no vulnerabilities found
        if (vulnerabilities.isEmpty()) {
            JPanel noVulnsPanel = new JPanel(new BorderLayout());
            noVulnsPanel.setBorder(BorderFactory.createEmptyBorder(50, 50, 50, 50));
            JLabel noVulnsLabel = new JLabel(
                "<html><center><h2>âœ“ No vulnerabilities detected</h2>" +
                "<p>Function appears to follow secure coding practices.</p></center></html>",
                SwingConstants.CENTER
            );
            noVulnsPanel.add(noVulnsLabel, BorderLayout.CENTER);
            scrollPane = new JScrollPane(noVulnsPanel);
        }

        // Buttons panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));

        JButton exportButton = new JButton("Export Report");
        JButton closeButton = new JButton("Close");

        exportButton.addActionListener(e -> {
            exportReport(function, vulnerabilities);
        });

        closeButton.addActionListener(e -> dialog.dispose());

        buttonPanel.add(exportButton);
        buttonPanel.add(closeButton);

        // Layout
        dialog.setLayout(new BorderLayout());
        dialog.add(summaryPanel, BorderLayout.NORTH);
        dialog.add(scrollPane, BorderLayout.CENTER);
        dialog.add(buttonPanel, BorderLayout.SOUTH);

        dialog.setVisible(true);
    }

    private void exportReport(Function function,
                             List<VulnerabilityScanner.Vulnerability> vulnerabilities) {
        // Create report text
        StringBuilder report = new StringBuilder();
        report.append("GhidrAssist Vulnerability Scan Report\n");
        report.append("=====================================\n\n");
        report.append("Function: ").append(function.getName()).append("\n");
        report.append("Entry Point: ").append(function.getEntryPoint()).append("\n");
        report.append("Total Vulnerabilities: ").append(vulnerabilities.size()).append("\n\n");

        if (vulnerabilities.isEmpty()) {
            report.append("No vulnerabilities detected.\n");
        } else {
            for (int i = 0; i < vulnerabilities.size(); i++) {
                VulnerabilityScanner.Vulnerability vuln = vulnerabilities.get(i);
                report.append(String.format("\n[%d] %s (%s)\n", i + 1, vuln.type, vuln.severity));
                report.append(String.format("    Location: %s\n", vuln.location));
                report.append(String.format("    Description: %s\n", vuln.description));
                report.append(String.format("    Recommendation: %s\n", vuln.recommendation));
            }
        }

        // Show in text area dialog
        JDialog exportDialog = new JDialog();
        exportDialog.setTitle("Vulnerability Report");
        exportDialog.setSize(700, 500);
        exportDialog.setLocationRelativeTo(null);

        JTextArea textArea = new JTextArea(report.toString());
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));

        JScrollPane scrollPane = new JScrollPane(textArea);

        JButton copyButton = new JButton("Copy to Clipboard");
        copyButton.addActionListener(e -> {
            textArea.selectAll();
            textArea.copy();
            JOptionPane.showMessageDialog(exportDialog, "Report copied to clipboard!");
        });

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(copyButton);

        exportDialog.setLayout(new BorderLayout());
        exportDialog.add(scrollPane, BorderLayout.CENTER);
        exportDialog.add(buttonPanel, BorderLayout.SOUTH);

        exportDialog.setVisible(true);
    }

    @Override
    protected boolean isEnabledForContext(ListingActionContext context) {
        // Enable only when cursor is on a function
        if (context.getProgram() == null || context.getAddress() == null) {
            return false;
        }

        return context.getProgram().getFunctionManager()
            .getFunctionContaining(context.getAddress()) != null;
    }
}
