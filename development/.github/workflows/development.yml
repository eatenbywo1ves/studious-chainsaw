name: Development Workflow

on:
  push:
    branches: [ develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ develop ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Quick validation for development branches
  quick-check:
    runs-on: ubuntu-latest
    name: Quick Development Check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install basic dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest

      - name: Quick lint check
        run: |
          ruff check . --select E,W,F --show-fixes
        continue-on-error: true

      - name: Quick test run
        run: |
          python -m pytest tests/unit/ -x -v --tb=short
        continue-on-error: true

  # GPU library validation (when possible)
  gpu-validation:
    runs-on: ubuntu-latest
    name: GPU Libraries Validation
    needs: quick-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install CPU versions for validation
        run: |
          python -m pip install --upgrade pip
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          pip install numpy scipy
          # Skip CuPy and Numba for CPU-only validation

      - name: Validate GPU-related imports
        run: |
          python -c "import torch; print(f'PyTorch CPU: {torch.__version__}')"
          python -c "import apps.catalytic.core; print('Catalytic core imports OK')"
          python -c "import apps.catalytic.gpu; print('GPU modules structure OK')"

  # Database schema validation
  database-validation:
    runs-on: ubuntu-latest
    name: Database Schema Validation
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary alembic sqlalchemy

      - name: Validate database schema
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
        run: |
          echo "Validating database schema and migrations..."
          python -c "
          import psycopg2
          conn = psycopg2.connect('postgresql://postgres:test_password@localhost:5432/test_db')
          cur = conn.cursor()
          cur.execute('SELECT version();')
          print('Database connection successful:', cur.fetchone())
          conn.close()
          "

  # Docker compose validation
  docker-compose-validation:
    runs-on: ubuntu-latest
    name: Docker Compose Validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose files
        run: |
          docker-compose -f docker-compose.yml config
          docker-compose -f docker-compose-saas.yml config
          docker-compose -f docker-compose-core.yml config
          echo "All docker-compose files are valid!"

  # Development summary
  development-summary:
    runs-on: ubuntu-latest
    name: Development Summary
    needs: [quick-check, gpu-validation, database-validation, docker-compose-validation]
    if: always()
    steps:
      - name: Create development summary
        run: |
          echo "## üß™ Development Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quick Check**: ${{ needs.quick-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GPU Validation**: ${{ needs.gpu-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Validation**: ${{ needs.database-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Validation**: ${{ needs.docker-compose-validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Check if ready for main
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          if [ "${{ needs.quick-check.result }}" == "success" ] && \
             [ "${{ needs.gpu-validation.result }}" == "success" ] && \
             [ "${{ needs.database-validation.result }}" == "success" ] && \
             [ "${{ needs.docker-compose-validation.result }}" == "success" ]; then
            echo "‚úÖ Ready for merge to main branch!"
            echo "üöÄ All validation checks passed"
          else
            echo "‚ùå Not ready for merge - some checks failed"
            exit 1
          fi