# Unified Docker Compose Configuration for Catalytic Computing Platform
# Use profiles to select deployment mode:
# - docker compose --profile core up       (Core services only)
# - docker compose --profile saas up       (Full SaaS stack)
# - docker compose --profile dev up        (Development environment)
# - docker compose --profile all up        (Everything)

version: '3.8'

services:
  # ============================================================================
  # CORE SERVICES (Always included)
  # ============================================================================

  # Catalytic Computing API Gateway
  catalytic-api:
    image: catalytic-computing:latest
    container_name: catalytic-api
    build:
      context: .
      dockerfile: Dockerfile.catalytic
    ports:
      - "${API_PORT:-8080}:8080"
      - "${METRICS_PORT:-8082}:8082"
    environment:
      - PYTHONUNBUFFERED=1
      - LATTICE_MEMORY_OPTIMIZATION=${LATTICE_MEMORY_OPTIMIZATION:-enabled}
      - PARALLEL_CORES=${PARALLEL_CORES:-12}
      - MAX_LATTICES=${MAX_LATTICES:-100}
      - CACHE_SIZE=${CACHE_SIZE:-1024}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - DATABASE_URL=${DATABASE_URL:-}
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./apps/catalytic:/app/catalytic:ro
    restart: unless-stopped
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles: ["core", "saas", "dev", "all"]

  # Webhook Event System
  webhook-system:
    image: webhook-system:latest
    container_name: webhook-system
    build:
      context: .
      dockerfile: Dockerfile.webhook
    ports:
      - "${WEBHOOK_PORT:-8085}:8000"
      - "${WEBHOOK_METRICS_PORT:-9092}:9090"
    environment:
      - PYTHONUNBUFFERED=1
      - WEBHOOK_DB_PATH=/app/data/webhooks.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - RETRY_DELAY=${RETRY_DELAY:-5}
    volumes:
      - webhook-data:/app/data
      - ./logs/webhooks:/app/logs
    restart: unless-stopped
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["core", "saas", "dev", "all"]

  # ============================================================================
  # DATABASE SERVICES (For SaaS and Dev profiles)
  # ============================================================================

  postgres:
    image: postgres:15-alpine
    container_name: catalytic-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-catalytic_saas}
      POSTGRES_USER: ${POSTGRES_USER:-catalytic}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./saas/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./saas/database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-catalytic} -d ${POSTGRES_DB:-catalytic_saas}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    profiles: ["saas", "dev", "all"]

  redis:
    image: redis:7-alpine
    container_name: catalytic-redis
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles: ["saas", "dev", "all"]

  # ============================================================================
  # SAAS SERVICES (For SaaS profile only)
  # ============================================================================

  saas-api:
    image: catalytic-saas:latest
    container_name: catalytic-saas-api
    build:
      context: .
      dockerfile: Dockerfile.saas
    ports:
      - "${SAAS_PORT:-8000}:8000"
      - "${SAAS_METRICS_PORT:-8001}:8001"
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-catalytic}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/${POSTGRES_DB:-catalytic_saas}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-change_me_in_production}
      - JWT_ALGORITHM=${JWT_ALGORITHM:-RS256}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - ./logs/saas:/app/logs
      - ./keys:/app/keys:ro
      - ./saas:/app/saas:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - catalytic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    profiles: ["saas", "all"]

  # ============================================================================
  # MONITORING SERVICES (For Dev and All profiles)
  # ============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: catalytic-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - catalytic-network
    restart: unless-stopped
    profiles: ["dev", "monitoring", "all"]

  grafana:
    image: grafana/grafana:latest
    container_name: catalytic-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - catalytic-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["dev", "monitoring", "all"]

  # ============================================================================
  # DEVELOPMENT TOOLS (For Dev profile only)
  # ============================================================================

  adminer:
    image: adminer:latest
    container_name: catalytic-adminer
    ports:
      - "${ADMINER_PORT:-8086}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - catalytic-network
    restart: unless-stopped
    profiles: ["dev", "all"]

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: catalytic-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8087}:8081"
    networks:
      - catalytic-network
    restart: unless-stopped
    profiles: ["dev", "all"]

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  catalytic-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  webhook-data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local