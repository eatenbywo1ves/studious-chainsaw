# Security Monitoring and Alerting Configuration
# Prometheus + Grafana + AlertManager

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-security-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'production'
        environment: 'prod'

    # Alertmanager configuration
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
                - alertmanager:9093

    # Load security alert rules
    rule_files:
      - /etc/prometheus/rules/security-alerts.yml
      - /etc/prometheus/rules/performance-alerts.yml

    scrape_configs:
      # API server metrics
      - job_name: 'api-server'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - production
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: api-server
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

      # Redis (rate limiting backend)
      - job_name: 'redis'
        static_configs:
          - targets: ['redis:9121']

      # Node exporter (system metrics)
      - job_name: 'node'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

---
# Security Alert Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-security-rules
  namespace: monitoring
data:
  security-alerts.yml: |
    groups:
      - name: authentication
        interval: 30s
        rules:
          # Failed login attempts
          - alert: HighFailedLoginRate
            expr: rate(auth_login_failures_total[5m]) > 10
            for: 2m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "High failed login rate detected"
              description: "Failed login attempts: {{ $value }} per second for the last 5 minutes"

          - alert: CriticalFailedLoginRate
            expr: rate(auth_login_failures_total[5m]) > 50
            for: 1m
            labels:
              severity: critical
              category: security
            annotations:
              summary: "CRITICAL: Potential brute force attack"
              description: "Failed login attempts: {{ $value }} per second - possible brute force attack"

          # Account lockouts
          - alert: HighAccountLockoutRate
            expr: rate(auth_account_lockouts_total[10m]) > 5
            for: 5m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "High account lockout rate"
              description: "Account lockouts: {{ $value }} per second"

          # Token validation failures
          - alert: InvalidTokenSpike
            expr: rate(jwt_invalid_tokens_total[5m]) > 20
            for: 2m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "Spike in invalid token attempts"
              description: "Invalid tokens: {{ $value }} per second - potential token theft"

      - name: rate_limiting
        interval: 30s
        rules:
          # Rate limit violations
          - alert: HighRateLimitViolations
            expr: rate(rate_limit_violations_total[5m]) > 100
            for: 2m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "High rate limit violations"
              description: "Rate limit hits: {{ $value }} per second"

          - alert: DDoSAttackDetected
            expr: rate(rate_limit_violations_total[1m]) > 1000
            for: 30s
            labels:
              severity: critical
              category: security
            annotations:
              summary: "CRITICAL: Potential DDoS attack"
              description: "Massive rate limit violations: {{ $value }} per second"

          # IP-based blocking
          - alert: HighIPBlockingRate
            expr: rate(ddos_blocked_ips_total[5m]) > 10
            for: 2m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "High IP blocking rate"
              description: "IPs blocked: {{ $value }} per second"

      - name: input_validation
        interval: 30s
        rules:
          # Input validation failures
          - alert: HighValidationFailureRate
            expr: rate(input_validation_failures_total[5m]) > 50
            for: 2m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "High input validation failure rate"
              description: "Validation failures: {{ $value }} per second - possible attack attempts"

          # SQL injection attempts
          - alert: SQLInjectionAttempts
            expr: increase(input_validation_failures_total{type="sql_injection"}[5m]) > 5
            labels:
              severity: critical
              category: security
            annotations:
              summary: "CRITICAL: SQL injection attempts detected"
              description: "SQL injection attempts in last 5 minutes: {{ $value }}"

          # XSS attempts
          - alert: XSSAttempts
            expr: increase(input_validation_failures_total{type="xss"}[5m]) > 10
            labels:
              severity: high
              category: security
            annotations:
              summary: "XSS attack attempts detected"
              description: "XSS attempts in last 5 minutes: {{ $value }}"

      - name: authorization
        interval: 30s
        rules:
          # Authorization failures
          - alert: HighAuthorizationFailureRate
            expr: rate(auth_authorization_failures_total[5m]) > 20
            for: 2m
            labels:
              severity: warning
              category: security
            annotations:
              summary: "High authorization failure rate"
              description: "Authorization failures: {{ $value }} per second"

          # Privilege escalation attempts
          - alert: PrivilegeEscalationAttempt
            expr: increase(auth_privilege_escalation_attempts_total[5m]) > 0
            labels:
              severity: critical
              category: security
            annotations:
              summary: "CRITICAL: Privilege escalation attempt"
              description: "Privilege escalation attempts: {{ $value }}"

      - name: encryption
        interval: 60s
        rules:
          # Certificate expiration
          - alert: CertificateExpiringSoon
            expr: (x509_cert_expiry_seconds - time()) / 86400 < 30
            labels:
              severity: warning
              category: security
            annotations:
              summary: "SSL certificate expiring soon"
              description: "Certificate expires in {{ $value }} days"

          - alert: CertificateExpiryCritical
            expr: (x509_cert_expiry_seconds - time()) / 86400 < 7
            labels:
              severity: critical
              category: security
            annotations:
              summary: "CRITICAL: SSL certificate expiring"
              description: "Certificate expires in {{ $value }} days"

          # Key rotation overdue
          - alert: KeyRotationOverdue
            expr: (time() - key_last_rotation_timestamp_seconds) / 86400 > 90
            labels:
              severity: warning
              category: security
            annotations:
              summary: "Key rotation overdue"
              description: "Key has not been rotated in {{ $value }} days"

      - name: system_security
        interval: 30s
        rules:
          # Pod security violations
          - alert: PodSecurityViolation
            expr: increase(pod_security_violations_total[5m]) > 0
            labels:
              severity: high
              category: security
            annotations:
              summary: "Pod security policy violation"
              description: "Pod security violations: {{ $value }}"

          # Container running as root
          - alert: ContainerRunningAsRoot
            expr: count(container_running_as_root == 1) > 0
            labels:
              severity: critical
              category: security
            annotations:
              summary: "CRITICAL: Container running as root"
              description: "{{ $value }} containers running with root privileges"

---
# AlertManager Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.company.com:587'
      smtp_from: 'alerts@company.com'
      smtp_auth_username: 'alerts@company.com'
      smtp_auth_password: 'SMTP_PASSWORD'

    # Route alerts to appropriate receivers
    route:
      receiver: 'default'
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h

      routes:
        # Critical security alerts - immediate notification
        - match:
            severity: critical
            category: security
          receiver: 'security-team-critical'
          group_wait: 0s
          group_interval: 1m
          repeat_interval: 5m

        # High security alerts
        - match:
            severity: high
            category: security
          receiver: 'security-team-high'
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 1h

        # Warning security alerts
        - match:
            severity: warning
            category: security
          receiver: 'security-team-warning'
          group_wait: 5m
          group_interval: 15m
          repeat_interval: 4h

    receivers:
      # Default receiver
      - name: 'default'
        email_configs:
          - to: 'ops@company.com'

      # Critical security alerts
      - name: 'security-team-critical'
        email_configs:
          - to: 'security-oncall@company.com'
            headers:
              Subject: '[CRITICAL] Security Alert: {{ .GroupLabels.alertname }}'
        pagerduty_configs:
          - service_key: 'PAGERDUTY_KEY'
            severity: 'critical'
        slack_configs:
          - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
            channel: '#security-critical'
            title: 'CRITICAL Security Alert'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'

      # High security alerts
      - name: 'security-team-high'
        email_configs:
          - to: 'security-team@company.com'
            headers:
              Subject: '[HIGH] Security Alert: {{ .GroupLabels.alertname }}'
        slack_configs:
          - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
            channel: '#security-alerts'
            title: 'High Security Alert'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'

      # Warning security alerts
      - name: 'security-team-warning'
        email_configs:
          - to: 'security-team@company.com'
            headers:
              Subject: '[WARNING] Security Alert: {{ .GroupLabels.alertname }}'
        slack_configs:
          - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
            channel: '#security-monitoring'
            title: 'Security Warning'
            text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'

---
# Grafana Dashboard ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-security-dashboard
  namespace: monitoring
data:
  security-dashboard.json: |
    {
      "dashboard": {
        "title": "Security Monitoring Dashboard",
        "panels": [
          {
            "title": "Authentication Metrics",
            "targets": [
              {
                "expr": "rate(auth_login_attempts_total[5m])",
                "legendFormat": "Login Attempts"
              },
              {
                "expr": "rate(auth_login_failures_total[5m])",
                "legendFormat": "Failed Logins"
              }
            ]
          },
          {
            "title": "Rate Limiting",
            "targets": [
              {
                "expr": "rate(rate_limit_violations_total[5m])",
                "legendFormat": "Rate Limit Hits"
              },
              {
                "expr": "rate(ddos_blocked_ips_total[5m])",
                "legendFormat": "Blocked IPs"
              }
            ]
          },
          {
            "title": "Input Validation Failures",
            "targets": [
              {
                "expr": "rate(input_validation_failures_total[5m])",
                "legendFormat": "Total Failures"
              },
              {
                "expr": "rate(input_validation_failures_total{type=\"sql_injection\"}[5m])",
                "legendFormat": "SQL Injection"
              },
              {
                "expr": "rate(input_validation_failures_total{type=\"xss\"}[5m])",
                "legendFormat": "XSS Attempts"
              }
            ]
          },
          {
            "title": "JWT Token Operations",
            "targets": [
              {
                "expr": "rate(jwt_tokens_created_total[5m])",
                "legendFormat": "Tokens Created"
              },
              {
                "expr": "rate(jwt_tokens_verified_total[5m])",
                "legendFormat": "Tokens Verified"
              },
              {
                "expr": "rate(jwt_invalid_tokens_total[5m])",
                "legendFormat": "Invalid Tokens"
              }
            ]
          }
        ]
      }
    }

---
# Deployment for Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--storage.tsdb.retention.time=30d'
            - '--web.enable-lifecycle'
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
            - name: storage
              mountPath: /prometheus
      volumes:
        - name: config
          configMap:
            name: prometheus-security-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage

---
# Service for Prometheus
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090

---
# Deployment for Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.0.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: password
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: dashboards
          configMap:
            name: grafana-security-dashboard

---
# Service for Grafana
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer
