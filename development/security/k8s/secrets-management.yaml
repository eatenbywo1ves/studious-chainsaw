# Kubernetes Secrets Management with Encryption
# Implements secure secrets handling with encryption at rest and in transit

apiVersion: v1
kind: Secret
metadata:
  name: catalytic-db-secret
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: database
  annotations:
    kubernetes.io/description: "Database credentials with encryption"
    security.catalytic.io/encrypted: "true"
    security.catalytic.io/rotation-policy: "30d"
type: Opaque
data:
  # These should be base64 encoded values
  # In production, use external secret management like HashiCorp Vault
  POSTGRES_DB: Y2F0YWx5dGljX3NhYXM=  # catalytic_saas
  POSTGRES_USER: Y2F0YWx5dGljX3VzZXI=  # catalytic_user
  POSTGRES_PASSWORD: ""  # Generated securely, rotated regularly
  DATABASE_URL: ""  # Full connection string

---
apiVersion: v1
kind: Secret
metadata:
  name: catalytic-jwt-secret
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: authentication
  annotations:
    security.catalytic.io/encrypted: "true"
    security.catalytic.io/key-type: "rsa-2048"
    security.catalytic.io/rotation-policy: "90d"
type: kubernetes.io/tls
data:
  tls.crt: ""  # JWT public key (PEM format)
  tls.key: ""  # JWT private key (PEM format, encrypted)

---
apiVersion: v1
kind: Secret
metadata:
  name: catalytic-stripe-secret
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: payment
  annotations:
    security.catalytic.io/encrypted: "true"
    security.catalytic.io/external-source: "vault"
    security.catalytic.io/rotation-policy: "manual"
type: Opaque
data:
  STRIPE_SECRET_KEY: ""  # Stripe secret key
  STRIPE_WEBHOOK_SECRET: ""  # Webhook endpoint secret
  STRIPE_PUBLISHABLE_KEY: ""  # Publishable key (less sensitive)

---
apiVersion: v1
kind: Secret
metadata:
  name: catalytic-redis-secret
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: cache
  annotations:
    security.catalytic.io/encrypted: "true"
    security.catalytic.io/rotation-policy: "60d"
type: Opaque
data:
  REDIS_PASSWORD: ""  # Redis AUTH password
  REDIS_URL: ""  # Full Redis connection string with auth

---
apiVersion: v1
kind: Secret
metadata:
  name: catalytic-api-keys
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: api
  annotations:
    security.catalytic.io/encrypted: "true"
    security.catalytic.io/access-level: "restricted"
type: Opaque
data:
  SENDGRID_API_KEY: ""  # Email service
  GITHUB_TOKEN: ""  # For CI/CD
  DOCKER_REGISTRY_TOKEN: ""  # Private registry access

---
apiVersion: v1
kind: Secret
metadata:
  name: catalytic-tls-cert
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: ingress
  annotations:
    security.catalytic.io/cert-type: "wildcard"
    security.catalytic.io/issuer: "letsencrypt"
    security.catalytic.io/auto-renew: "true"
type: kubernetes.io/tls
data:
  tls.crt: ""  # TLS certificate
  tls.key: ""  # TLS private key

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: catalytic-config
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: config
data:
  # Application configuration
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  API_VERSION: "v1"
  
  # Security settings
  JWT_ALGORITHM: "RS256"
  JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "15"
  JWT_REFRESH_TOKEN_EXPIRE_DAYS: "7"
  
  # Rate limiting
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_PER_IP: "1000"
  RATE_LIMIT_WINDOW_SECONDS: "3600"
  
  # Feature flags
  ENABLE_API_RATE_LIMITING: "true"
  ENABLE_SECURITY_HEADERS: "true"
  ENABLE_CORS_PROTECTION: "true"
  ENABLE_AUDIT_LOGGING: "true"

---
# External Secrets Operator Configuration (for Vault integration)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: catalytic-vault-store
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: secrets
spec:
  provider:
    vault:
      server: "https://vault.catalytic-computing.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "catalytic-secrets-reader"
          serviceAccountRef:
            name: catalytic-vault-sa

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: catalytic-vault-secrets
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: catalytic-vault-store
    kind: SecretStore
  target:
    name: catalytic-vault-managed-secret
    creationPolicy: Owner
  data:
  - secretKey: database-password
    remoteRef:
      key: catalytic/database
      property: password
  - secretKey: stripe-secret
    remoteRef:
      key: catalytic/payment
      property: stripe_secret_key
  - secretKey: jwt-private-key
    remoteRef:
      key: catalytic/auth
      property: jwt_private_key

---
# Service Account for Vault integration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: catalytic-vault-sa
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: vault
automountServiceAccountToken: true

---
# ClusterRole for Vault service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: catalytic-vault-role
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: vault
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: catalytic-vault-binding
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: vault
subjects:
- kind: ServiceAccount
  name: catalytic-vault-sa
  namespace: catalytic-system
roleRef:
  kind: ClusterRole
  name: catalytic-vault-role
  apiGroup: rbac.authorization.k8s.io

---
# Secret rotation CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: catalytic-secret-rotation
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: security
spec:
  schedule: "0 2 * * 0"  # Weekly on Sunday at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: catalytic-security-sa
          containers:
          - name: secret-rotator
            image: catalytic-security-tools:latest
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting secret rotation..."
              
              # Rotate database passwords
              if [ "$(date +%d)" = "01" ]; then
                echo "Monthly rotation: Database passwords"
                /usr/local/bin/rotate-db-password.sh
              fi
              
              # Rotate API keys
              if [ "$(date +%u)" = "7" ]; then
                echo "Weekly rotation: API keys"
                /usr/local/bin/rotate-api-keys.sh
              fi
              
              # Check certificate expiration
              /usr/local/bin/check-cert-expiry.sh
              
              echo "Secret rotation completed"
            env:
            - name: VAULT_ADDR
              value: "https://vault.catalytic-computing.com"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            resources:
              requests:
                memory: "128Mi"
                cpu: "100m"
              limits:
                memory: "256Mi"
                cpu: "200m"
            securityContext:
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 1000
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          restartPolicy: OnFailure
          securityContext:
            seccompProfile:
              type: RuntimeDefault

---
# Sealed Secrets for GitOps (alternative to Vault)
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: catalytic-sealed-secrets
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: gitops-secrets
spec:
  encryptedData:
    # These would be encrypted using kubeseal
    database-password: "AgBy3i4OJSWK+PiTySYZZA9rO43cGDEQAx..."  # Encrypted
    stripe-secret: "AgAKAoivm38GfHyMVVxq2tPp7zANGWHc..."  # Encrypted
  template:
    metadata:
      name: catalytic-sealed-secrets
      namespace: catalytic-system
    type: Opaque

---
# Pod Security Policy for secrets access
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: catalytic-secrets-psp
  namespace: catalytic-system
  labels:
    app.kubernetes.io/name: catalytic-computing
    app.kubernetes.io/component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'secret'
    - 'configMap'
    - 'projected'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'