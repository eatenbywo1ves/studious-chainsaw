/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ghidragraph.services;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import ghidra.service.graph.AttributedGraph;

/**
 * Service for exporting AttributedGraphs to various formats
 *
 * Supports:
 * - Mermaid.js (markdown-compatible flowcharts)
 * - DOT/Graphviz (industry standard)
 * - JSON (machine-readable)
 */
public class GraphExportService {

	/**
	 * Export formats supported
	 */
	public enum ExportFormat {
		MERMAID("mmd", "Mermaid.js"),
		DOT("dot", "DOT/Graphviz"),
		JSON("json", "JSON");

		private final String extension;
		private final String displayName;

		ExportFormat(String extension, String displayName) {
			this.extension = extension;
			this.displayName = displayName;
		}

		public String getExtension() {
			return extension;
		}

		public String getDisplayName() {
			return displayName;
		}
	}

	/**
	 * Constructor
	 */
	public GraphExportService() {
	}

	/**
	 * Export a graph to a file
	 *
	 * @param graph The graph to export
	 * @param file The output file
	 * @param format The export format
	 * @throws IOException if export fails
	 */
	public void exportGraph(AttributedGraph graph, File file, ExportFormat format)
			throws IOException {

		if (graph == null) {
			throw new IllegalArgumentException("Graph cannot be null");
		}

		if (file == null) {
			throw new IllegalArgumentException("File cannot be null");
		}

		String content;
		switch (format) {
			case MERMAID:
				content = new MermaidExporter().export(graph);
				break;
			case DOT:
				content = exportToDOT(graph);
				break;
			case JSON:
				content = exportToJSON(graph);
				break;
			default:
				throw new IllegalArgumentException("Unsupported format: " + format);
		}

		writeToFile(file, content);
	}

	/**
	 * Export graph to DOT/Graphviz format
	 *
	 * @param graph The graph to export
	 * @return DOT format string
	 */
	private String exportToDOT(AttributedGraph graph) {
		StringBuilder sb = new StringBuilder();
		sb.append("digraph \"").append(graph.getName()).append("\" {\n");
		sb.append("  // Graph generated by GhidraGraph\n");
		sb.append("  rankdir=TD;\n");
		sb.append("  node [shape=box, style=rounded];\n\n");

		// Add vertices
		graph.vertexSet().forEach(vertex -> {
			String id = sanitizeId(vertex.getId());
			String label = sanitizeDotString(vertex.getName());
			sb.append("  ").append(id).append(" [label=\"").append(label).append("\"];\n");
		});

		sb.append("\n");

		// Add edges
		graph.edgeSet().forEach(edge -> {
			String sourceId = sanitizeId(graph.getEdgeSource(edge).getId());
			String targetId = sanitizeId(graph.getEdgeTarget(edge).getId());
			sb.append("  ").append(sourceId).append(" -> ").append(targetId).append(";\n");
		});

		sb.append("}\n");
		return sb.toString();
	}

	/**
	 * Export graph to JSON format
	 *
	 * @param graph The graph to export
	 * @return JSON string
	 */
	private String exportToJSON(AttributedGraph graph) {
		StringBuilder sb = new StringBuilder();
		sb.append("{\n");
		sb.append("  \"name\": \"").append(escapeJson(graph.getName())).append("\",\n");
		sb.append("  \"description\": \"")
			.append(escapeJson(graph.getDescription())).append("\",\n");
		sb.append("  \"vertices\": [\n");

		// Add vertices
		boolean firstVertex = true;
		for (var vertex : graph.vertexSet()) {
			if (!firstVertex) {
				sb.append(",\n");
			}
			sb.append("    {\n");
			sb.append("      \"id\": \"").append(escapeJson(vertex.getId())).append("\",\n");
			sb.append("      \"name\": \"").append(escapeJson(vertex.getName())).append("\",\n");
			sb.append("      \"type\": \"")
				.append(escapeJson(vertex.getVertexType())).append("\"\n");
			sb.append("    }");
			firstVertex = false;
		}

		sb.append("\n  ],\n");
		sb.append("  \"edges\": [\n");

		// Add edges
		boolean firstEdge = true;
		for (var edge : graph.edgeSet()) {
			if (!firstEdge) {
				sb.append(",\n");
			}
			sb.append("    {\n");
			sb.append("      \"source\": \"")
				.append(escapeJson(graph.getEdgeSource(edge).getId())).append("\",\n");
			sb.append("      \"target\": \"")
				.append(escapeJson(graph.getEdgeTarget(edge).getId())).append("\",\n");
			sb.append("      \"type\": \"").append(escapeJson(edge.getEdgeType())).append("\"\n");
			sb.append("    }");
			firstEdge = false;
		}

		sb.append("\n  ]\n");
		sb.append("}\n");
		return sb.toString();
	}

	/**
	 * Write content to file
	 *
	 * @param file Output file
	 * @param content Content to write
	 * @throws IOException if write fails
	 */
	private void writeToFile(File file, String content) throws IOException {
		try (FileWriter writer = new FileWriter(file)) {
			writer.write(content);
		}
	}

	/**
	 * Sanitize ID for DOT format
	 *
	 * @param id ID to sanitize
	 * @return Sanitized ID
	 */
	private String sanitizeId(String id) {
		return "n" + id.replaceAll("[^a-zA-Z0-9]", "_");
	}

	/**
	 * Sanitize string for DOT format
	 *
	 * @param str String to sanitize
	 * @return Sanitized string
	 */
	private String sanitizeDotString(String str) {
		return str.replace("\"", "\\\"").replace("\n", "\\n");
	}

	/**
	 * Escape string for JSON
	 *
	 * @param str String to escape
	 * @return Escaped string
	 */
	private String escapeJson(String str) {
		if (str == null) {
			return "";
		}
		return str.replace("\\", "\\\\")
			.replace("\"", "\\\"")
			.replace("\n", "\\n")
			.replace("\r", "\\r")
			.replace("\t", "\\t");
	}
}
