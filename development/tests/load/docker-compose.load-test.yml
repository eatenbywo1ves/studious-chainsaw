version: '3.8'

services:
  # Locust Master (Web UI + coordination)
  locust-master:
    image: locustio/locust:latest
    container_name: locust-master
    ports:
      - "8089:8089"  # Web UI
      - "5557:5557"  # Master communication
    volumes:
      - ./locustfile.py:/mnt/locust/locustfile.py
      - ./results:/mnt/locust/results
    environment:
      - LOCUST_MODE=master
      - LOCUST_HOST=http://saas-api:8000
      - LOCUST_USERS=100
      - LOCUST_SPAWN_RATE=10
      - LOCUST_RUN_TIME=10m
      - LOCUST_LOGLEVEL=INFO
    command: >
      -f /mnt/locust/locustfile.py
      --master
      --expect-workers=2
      --host=http://saas-api:8000
      --html=/mnt/locust/results/report.html
      --csv=/mnt/locust/results/stats
    networks:
      - loadtest-network
    depends_on:
      - saas-api

  # Locust Worker 1
  locust-worker-1:
    image: locustio/locust:latest
    container_name: locust-worker-1
    volumes:
      - ./locustfile.py:/mnt/locust/locustfile.py
    environment:
      - LOCUST_MODE=worker
      - LOCUST_MASTER_NODE_HOST=locust-master
      - LOCUST_MASTER_NODE_PORT=5557
      - LOCUST_LOGLEVEL=INFO
    command: >
      -f /mnt/locust/locustfile.py
      --worker
      --master-host=locust-master
      --master-port=5557
    networks:
      - loadtest-network
    depends_on:
      - locust-master

  # Locust Worker 2
  locust-worker-2:
    image: locustio/locust:latest
    container_name: locust-worker-2
    volumes:
      - ./locustfile.py:/mnt/locust/locustfile.py
    environment:
      - LOCUST_MODE=worker
      - LOCUST_MASTER_NODE_HOST=locust-master
      - LOCUST_MASTER_NODE_PORT=5557
      - LOCUST_LOGLEVEL=INFO
    command: >
      -f /mnt/locust/locustfile.py
      --worker
      --master-host=locust-master
      --master-port=5557
    networks:
      - loadtest-network
    depends_on:
      - locust-master

  # SaaS API Server (Test Target)
  saas-api:
    build:
      context: ../../saas/api
      dockerfile: Dockerfile
    container_name: saas-api-loadtest
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=loadtest
      - DATABASE_URL=postgresql://catalytic:catalytic@postgres-loadtest:5432/catalytic_loadtest
      - REDIS_HOST=redis-loadtest
      - REDIS_PORT=6379
      - SECRET_KEY=loadtest-secret-key-change-in-production
      - WORKERS=4
      - LOG_LEVEL=WARNING
    networks:
      - loadtest-network
    depends_on:
      - postgres-loadtest
      - redis-loadtest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database
  postgres-loadtest:
    image: postgres:15-alpine
    container_name: postgres-loadtest
    environment:
      - POSTGRES_DB=catalytic_loadtest
      - POSTGRES_USER=catalytic
      - POSTGRES_PASSWORD=catalytic
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "5433:5432"
    volumes:
      - postgres-loadtest-data:/var/lib/postgresql/data
    networks:
      - loadtest-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U catalytic"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis-loadtest:
    image: redis:7-alpine
    container_name: redis-loadtest
    ports:
      - "6380:6379"
    volumes:
      - redis-loadtest-data:/data
    networks:
      - loadtest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save ""

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-loadtest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - loadtest-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-loadtest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - loadtest-network
    depends_on:
      - prometheus

volumes:
  postgres-loadtest-data:
    driver: local
  redis-loadtest-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  loadtest-network:
    driver: bridge
