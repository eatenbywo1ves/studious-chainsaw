version: '3.8'

services:
  # Test PostgreSQL database
  postgres-test:
    image: postgres:16-alpine
    container_name: saas-postgres-test
    environment:
      POSTGRES_DB: test_saas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5433:5432"
    volumes:
      - postgres-test-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Test Redis instance
  redis-test:
    image: redis:7-alpine
    container_name: saas-redis-test
    command: redis-server --requirepass test_redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - redis-test-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "test_redis_password", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test-network

  # Test SaaS API server (commented out - run separately for integration tests)
  # saas-api-test:
  #   build:
  #     context: ../../saas
  #     dockerfile: Dockerfile
  #   container_name: saas-api-test
  #   environment:
  #     # Database configuration
  #     DATABASE_URL: postgresql://postgres:postgres@postgres-test:5432/test_saas
  #
  #     # Redis configuration
  #     REDIS_HOST: redis-test
  #     REDIS_PORT: 6379
  #     REDIS_PASSWORD: test_redis_password
  #
  #     # JWT configuration
  #     JWT_SECRET_KEY: test_secret_key_for_integration_tests_only
  #     JWT_ALGORITHM: HS256
  #     JWT_ACCESS_TOKEN_EXPIRE_MINUTES: 30
  #
  #     # API configuration
  #     API_HOST: 0.0.0.0
  #     API_PORT: 8000
  #     WORKERS: 1
  #
  #     # Security configuration
  #     RATE_LIMIT_PER_MINUTE: 60
  #     CORS_ORIGINS: "*"
  #
  #     # Feature flags
  #     ENABLE_GPU: "false"
  #     ENABLE_MONITORING: "true"
  #   ports:
  #     - "8001:8000"
  #   depends_on:
  #     postgres-test:
  #       condition: service_healthy
  #     redis-test:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   networks:
  #     - test-network

  # Prometheus for monitoring
  prometheus-test:
    image: prom/prometheus:latest
    container_name: saas-prometheus-test
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9091:9090"
    volumes:
      - ../../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-test-data:/prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

  # Grafana for visualization
  grafana-test:
    image: grafana/grafana:latest
    container_name: saas-grafana-test
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    ports:
      - "3001:3000"
    volumes:
      - grafana-test-data:/var/lib/grafana
      # - ../../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus-test
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - test-network

volumes:
  postgres-test-data:
    driver: local
  redis-test-data:
    driver: local
  prometheus-test-data:
    driver: local
  grafana-test-data:
    driver: local

networks:
  test-network:
    driver: bridge
