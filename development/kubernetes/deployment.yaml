apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalytic-saas-api
  namespace: catalytic-saas
  labels:
    app: catalytic-saas-api
    version: v1.0.0
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: catalytic-saas-api
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero downtime deployment
  template:
    metadata:
      labels:
        app: catalytic-saas-api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: catalytic-saas
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      # Init container for database migration (optional)
      initContainers:
      - name: db-migration
        image: your-registry.io/catalytic-saas-api:1.0.0
        command: ['python', 'scripts/run_migrations.py']
        envFrom:
        - configMapRef:
            name: app-config
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url

      containers:
      - name: catalytic-saas-api
        image: your-registry.io/catalytic-saas-api:1.0.0
        imagePullPolicy: IfNotPresent

        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 8082
          protocol: TCP

        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: app-config

        # Sensitive environment variables from Secrets
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
              optional: true
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: secret
        - name: STRIPE_API_KEY
          valueFrom:
            secretKeyRef:
              name: stripe-secrets
              key: api-key
        - name: STRIPE_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: stripe-secrets
              key: webhook-secret

        # Resource limits and requests
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Set to true if app doesn't write to disk
          capabilities:
            drop:
            - ALL

        # Volume mounts (if needed)
        # volumeMounts:
        # - name: tmp
        #   mountPath: /tmp
        # - name: cache
        #   mountPath: /app/cache

      # Volumes (if needed)
      # volumes:
      # - name: tmp
      #   emptyDir: {}
      # - name: cache
      #   emptyDir:
      #     sizeLimit: 1Gi

      # Node affinity (optional - prefer nodes with specific labels)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - catalytic-saas-api
              topologyKey: kubernetes.io/hostname

      # Tolerations (if using node taints)
      # tolerations:
      # - key: "workload-type"
      #   operator: "Equal"
      #   value: "api"
      #   effect: "NoSchedule"
