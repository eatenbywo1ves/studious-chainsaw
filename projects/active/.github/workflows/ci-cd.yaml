name: MCP Architecture CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mcp-architecture

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Node dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy

    - name: Install Node dependencies
      run: |
        if [ -f mcp-servers/package.json ]; then
          cd mcp-servers && npm ci
        fi

    - name: Lint Python code
      run: |
        black --check --diff shared/
        flake8 shared/
        mypy shared/ --ignore-missing-imports

    - name: Lint Node.js code
      run: |
        if [ -f mcp-servers/package.json ]; then
          cd mcp-servers && npm run lint
        fi

    - name: Run Python tests
      run: |
        cd shared && python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
      env:
        PYTHONPATH: ${{ github.workspace }}/shared

    - name: Run Node.js tests
      run: |
        if [ -f mcp-servers/package.json ]; then
          cd mcp-servers && npm test
        fi

    - name: Run integration tests
      run: |
        cd shared && python tests/test_end_to_end_integration.py
      env:
        PYTHONPATH: ${{ github.workspace }}/shared

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./shared/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Python security scan
      run: |
        pip install bandit safety
        bandit -r shared/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          trivy-results.sarif

  build:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        component: [api-gateway, observatory-agent, mcp-servers]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.component }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          VCS_REF=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        cd k8s/overlays/staging
        kustomize edit set image \
          mcp/api-gateway=${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:develop-${{ github.sha }} \
          mcp/observatory-agent=${{ env.REGISTRY }}/${{ github.repository }}/observatory-agent:develop-${{ github.sha }} \
          mcp/mcp-servers=${{ env.REGISTRY }}/${{ github.repository }}/mcp-servers:develop-${{ github.sha }}
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/api-gateway -n mcp-staging --timeout=300s
        kubectl rollout status deployment/observatory-agent -n mcp-staging --timeout=300s

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=api-gateway -n mcp-staging --timeout=300s
        kubectl port-forward svc/api-gateway-service 9000:9000 -n mcp-staging &
        sleep 10
        curl -f http://localhost:9000/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy canary release
      run: |
        cd k8s/overlays/production
        kustomize edit set image \
          mcp/api-gateway=${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:${{ github.event.release.tag_name }} \
          mcp/observatory-agent=${{ env.REGISTRY }}/${{ github.repository }}/observatory-agent:${{ github.event.release.tag_name }} \
          mcp/mcp-servers=${{ env.REGISTRY }}/${{ github.repository }}/mcp-servers:${{ github.event.release.tag_name }}
        
        # Deploy canary (10% traffic)
        kustomize build . > deployment.yaml
        sed -i 's/replicas: 3/replicas: 1/' deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/api-gateway -n mcp-production --timeout=600s

    - name: Run production health checks
      run: |
        kubectl wait --for=condition=ready pod -l app=api-gateway -n mcp-production --timeout=600s
        # Additional health checks would go here
        
    - name: Full production deployment
      run: |
        cd k8s/overlays/production
        kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/api-gateway -n mcp-production --timeout=600s
        kubectl rollout status deployment/observatory-agent -n mcp-production --timeout=600s

    - name: Post-deployment verification
      run: |
        # Run comprehensive health checks
        kubectl get pods -n mcp-production
        kubectl get services -n mcp-production
        
        # Verify external access
        kubectl port-forward svc/api-gateway-service 9000:9000 -n mcp-production &
        sleep 15
        curl -f http://localhost:9000/health || exit 1
        curl -f http://localhost:9000/stats || exit 1

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        # This would clean up old container images
        echo "Cleanup would happen here in a real environment"