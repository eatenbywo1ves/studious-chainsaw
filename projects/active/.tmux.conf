# TMUX Configuration for Workflow Architecture Development
# Optimized for multi-service debugging and monitoring

# ═══════════════════════════════════════════════════════════════════════════════
# BASIC SETTINGS
# ═══════════════════════════════════════════════════════════════════════════════

# Use UTF-8
set -g utf8
set-window-option -g utf8 on

# Set tmux to use 256 colors
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

# Enable mouse support for easier pane management
set -g mouse on

# Set scrollback history to 10000 (10k)
set -g history-limit 10000

# Shorten command delay
set -sg escape-time 1

# Set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

# Automatically renumber windows when one is closed
set -g renumber-windows on

# ═══════════════════════════════════════════════════════════════════════════════
# KEY BINDINGS - Workflow Development Optimized
# ═══════════════════════════════════════════════════════════════════════════════

# Change prefix from 'C-b' to 'C-a' (easier to reach)
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Reload tmux config with prefix + r
bind r source-file ~/.tmux.conf \; display "Tmux config reloaded!"

# Split panes using | and - (more intuitive)
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# Switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R  
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Resize panes with prefix + arrow keys
bind -r Left resize-pane -L 5
bind -r Right resize-pane -R 5
bind -r Up resize-pane -U 5
bind -r Down resize-pane -D 5

# Quick window switching
bind -n C-Right next-window
bind -n C-Left previous-window

# Create new window with current path
bind c new-window -c "#{pane_current_path}"

# ═══════════════════════════════════════════════════════════════════════════════
# WORKFLOW-SPECIFIC KEY BINDINGS
# ═══════════════════════════════════════════════════════════════════════════════

# Workflow Development Layouts
bind W run-shell "tmux source-file ~/.tmux-workflows/development-layout"
bind O run-shell "tmux source-file ~/.tmux-workflows/orchestrator-layout"
bind M run-shell "tmux source-file ~/.tmux-workflows/monitoring-layout"
bind D run-shell "tmux source-file ~/.tmux-workflows/debug-layout"

# Quick service commands
bind S new-window -n "services" "cd ~/development/shared && python -c 'from libraries.service_discovery import get_service_discovery; print(get_service_discovery().get_statistics())'"
bind Q new-window -n "queues" "redis-cli info | grep -E 'connected_clients|used_memory|keyspace'"
bind K new-window -n "k8s" "kubectl get pods -A"
bind L new-window -n "logs" "cd ~/development && tail -f logs/*.log"

# Agent management shortcuts
bind A command-prompt -p "Agent ID:" "new-window -n 'agent-%1' 'kubectl logs -f \$(kubectl get pods -l agent-id=%1 -o name)'"
bind T command-prompt -p "Workflow ID:" "new-window -n 'workflow-%1' 'python -c \"from shared.libraries.workflow_engine import get_workflow_engine; print(get_workflow_engine().get_workflow_status(\\\"%1\\\"))\"'"

# ═══════════════════════════════════════════════════════════════════════════════
# VISUAL THEME - Workflow Architecture Themed
# ═══════════════════════════════════════════════════════════════════════════════

# Status bar colors
set -g status-bg colour238
set -g status-fg colour255

# Window status colors
setw -g window-status-current-style fg=colour81,bg=colour238,bold
setw -g window-status-style fg=colour138,bg=colour235,none

# Pane border colors
set -g pane-border-style fg=colour238
set -g pane-active-border-style fg=colour81

# Message colors
set -g message-style fg=colour81,bg=colour238

# ═══════════════════════════════════════════════════════════════════════════════
# STATUS BAR - Enhanced for Workflow Monitoring
# ═══════════════════════════════════════════════════════════════════════════════

# Enable status bar
set -g status on

# Status bar refresh interval
set -g status-interval 5

# Left status: session name and workflow indicator
set -g status-left-length 40
set -g status-left "#[fg=colour81,bg=colour238,bold] ⚡ #S #[fg=colour238,bg=colour235,nobold]"

# Right status: system info and workflow stats  
set -g status-right-length 150
set -g status-right "#[fg=colour238,bg=colour235]#[fg=colour255,bg=colour238] 🔧 #(cd ~/development && python -c 'from shared.libraries.workflow_engine import get_workflow_engine; stats=get_workflow_engine().get_statistics(); print(f\"WF:{stats.get(\"workflows_completed\",0)} T:{stats.get(\"tasks_completed\",0)}\")' 2>/dev/null || echo 'N/A') #[fg=colour81,bg=colour238]#[fg=colour238,bg=colour81,bold] 📊 #(cd ~/development && python -c 'from shared.libraries.message_queue import get_message_broker; stats=get_message_broker().get_statistics(); print(f\"Q:{stats.get(\"total_published\",0)}\")' 2>/dev/null || echo 'N/A') #[fg=colour255,bg=colour238] %Y-%m-%d %H:%M "

# Window status format
setw -g window-status-format "#[fg=colour138,bg=colour235] #I:#W "
setw -g window-status-current-format "#[fg=colour81,bg=colour238,bold] #I:#W #[fg=colour238,bg=colour235,nobold]"

# ═══════════════════════════════════════════════════════════════════════════════
# WORKFLOW-SPECIFIC SETTINGS
# ═══════════════════════════════════════════════════════════════════════════════

# Automatic window naming based on running command
setw -g automatic-rename on
set -g set-titles on
set -g set-titles-string '#T - #W'

# Activity monitoring for background services
setw -g monitor-activity on
set -g visual-activity off  # Don't show activity notifications

# Don't exit copy mode when mouse drag ends
unbind -T copy-mode-vi MouseDragEnd1Pane

# Copy to system clipboard (requires xclip on Linux/WSL)
if-shell "command -v xclip" {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
}

# ═══════════════════════════════════════════════════════════════════════════════
# SESSION MANAGEMENT
# ═══════════════════════════════════════════════════════════════════════════════

# New session in current directory
bind N command-prompt -p "Session name:" "new-session -d -s '%1' -c '#{pane_current_path}'"

# Switch to last session
bind Tab switch-client -l

# Session browser
bind s choose-session

# ═══════════════════════════════════════════════════════════════════════════════
# WORKFLOW AUTOMATION HOOKS
# ═══════════════════════════════════════════════════════════════════════════════

# Auto-create log directory when tmux starts
run-shell "mkdir -p ~/development/logs"

# Create workflow sessions on tmux server start
# This will be handled by our Python integration